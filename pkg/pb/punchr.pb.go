// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: punchr.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HolePunchEndReason int32

const (
	HolePunchEndReason_UNKNOWN        HolePunchEndReason = 0
	HolePunchEndReason_NO_CONNECTION  HolePunchEndReason = 1
	HolePunchEndReason_NOT_INITIATED  HolePunchEndReason = 2
	HolePunchEndReason_DIRECT_DIAL    HolePunchEndReason = 3
	HolePunchEndReason_PROTOCOL_ERROR HolePunchEndReason = 4
	HolePunchEndReason_HOLE_PUNCH     HolePunchEndReason = 5
)

// Enum value maps for HolePunchEndReason.
var (
	HolePunchEndReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "NO_CONNECTION",
		2: "NOT_INITIATED",
		3: "DIRECT_DIAL",
		4: "PROTOCOL_ERROR",
		5: "HOLE_PUNCH",
	}
	HolePunchEndReason_value = map[string]int32{
		"UNKNOWN":        0,
		"NO_CONNECTION":  1,
		"NOT_INITIATED":  2,
		"DIRECT_DIAL":    3,
		"PROTOCOL_ERROR": 4,
		"HOLE_PUNCH":     5,
	}
)

func (x HolePunchEndReason) Enum() *HolePunchEndReason {
	p := new(HolePunchEndReason)
	*p = x
	return p
}

func (x HolePunchEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HolePunchEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_punchr_proto_enumTypes[0].Descriptor()
}

func (HolePunchEndReason) Type() protoreflect.EnumType {
	return &file_punchr_proto_enumTypes[0]
}

func (x HolePunchEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HolePunchEndReason.Descriptor instead.
func (HolePunchEndReason) EnumDescriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{0}
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     []byte   `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AgentVersion string   `protobuf:"bytes,2,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	Protocols    []string `protobuf:"bytes,3,rep,name=protocols,proto3" json:"protocols,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *RegisterRequest) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *RegisterRequest) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbPeerId int64 `protobuf:"varint,1,opt,name=db_peer_id,json=dbPeerId,proto3" json:"db_peer_id,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetDbPeerId() int64 {
	if x != nil {
		return x.DbPeerId
	}
	return 0
}

type GetAddrInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer ID of the requesting punchr client
	ClientId []byte `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *GetAddrInfoRequest) Reset() {
	*x = GetAddrInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddrInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddrInfoRequest) ProtoMessage() {}

func (x *GetAddrInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddrInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAddrInfoRequest) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{2}
}

func (x *GetAddrInfoRequest) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

type GetAddrInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteId       []byte   `protobuf:"bytes,1,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	MultiAddresses [][]byte `protobuf:"bytes,2,rep,name=multi_addresses,json=multiAddresses,proto3" json:"multi_addresses,omitempty"`
}

func (x *GetAddrInfoResponse) Reset() {
	*x = GetAddrInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddrInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddrInfoResponse) ProtoMessage() {}

func (x *GetAddrInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddrInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAddrInfoResponse) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{3}
}

func (x *GetAddrInfoResponse) GetRemoteId() []byte {
	if x != nil {
		return x.RemoteId
	}
	return nil
}

func (x *GetAddrInfoResponse) GetMultiAddresses() [][]byte {
	if x != nil {
		return x.MultiAddresses
	}
	return nil
}

type TrackHolePunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer ID of the requesting punchr client
	ClientId []byte `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Peer ID of the remote peer that was hole punched
	RemoteId []byte `protobuf:"bytes,2,opt,name=remote_id,json=remoteId,proto3" json:"remote_id,omitempty"`
	// A boolean flag indicating if the hole punch (or connection reversal) succeeded
	Success bool `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	// Unix timestamp in milliseconds of when the connection to the remote peer was initiated
	StartedAt int64 `protobuf:"varint,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// The multi addresses that were used to attempt a hole punch
	RemoteMultiAddresses [][]byte `protobuf:"bytes,5,rep,name=remote_multi_addresses,json=remoteMultiAddresses,proto3" json:"remote_multi_addresses,omitempty"`
	// The number of hole punch attempts
	Attempts int32 `protobuf:"varint,6,opt,name=attempts,proto3" json:"attempts,omitempty"`
	// The error that occurred if the hole punch failed
	Error string `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	// The error that occurred if the connection reversal failed. This is only set of
	// the multi addresses for the remote peer contained a publicly reachable non-relay multi address
	DirectDialError string `protobuf:"bytes,8,opt,name=direct_dial_error,json=directDialError,proto3" json:"direct_dial_error,omitempty"`
	// Start round trip time in seconds that falls out of the `holepunch.StartHolePunchEvt`
	StartRtt float32 `protobuf:"fixed32,9,opt,name=start_rtt,json=startRtt,proto3" json:"start_rtt,omitempty"`
	// The elapsed time in seconds from start to finish of the hole punch
	ElapsedTime float32 `protobuf:"fixed32,10,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	// The reason why the hole punch ended (direct dial succeeded, protocol error occurred, hole punch procedure finished)
	EndReason HolePunchEndReason `protobuf:"varint,11,opt,name=end_reason,json=endReason,proto3,enum=HolePunchEndReason" json:"end_reason,omitempty"`
}

func (x *TrackHolePunchRequest) Reset() {
	*x = TrackHolePunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackHolePunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackHolePunchRequest) ProtoMessage() {}

func (x *TrackHolePunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackHolePunchRequest.ProtoReflect.Descriptor instead.
func (*TrackHolePunchRequest) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{4}
}

func (x *TrackHolePunchRequest) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *TrackHolePunchRequest) GetRemoteId() []byte {
	if x != nil {
		return x.RemoteId
	}
	return nil
}

func (x *TrackHolePunchRequest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TrackHolePunchRequest) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *TrackHolePunchRequest) GetRemoteMultiAddresses() [][]byte {
	if x != nil {
		return x.RemoteMultiAddresses
	}
	return nil
}

func (x *TrackHolePunchRequest) GetAttempts() int32 {
	if x != nil {
		return x.Attempts
	}
	return 0
}

func (x *TrackHolePunchRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TrackHolePunchRequest) GetDirectDialError() string {
	if x != nil {
		return x.DirectDialError
	}
	return ""
}

func (x *TrackHolePunchRequest) GetStartRtt() float32 {
	if x != nil {
		return x.StartRtt
	}
	return 0
}

func (x *TrackHolePunchRequest) GetElapsedTime() float32 {
	if x != nil {
		return x.ElapsedTime
	}
	return 0
}

func (x *TrackHolePunchRequest) GetEndReason() HolePunchEndReason {
	if x != nil {
		return x.EndReason
	}
	return HolePunchEndReason_UNKNOWN
}

type TrackHolePunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrackHolePunchResponse) Reset() {
	*x = TrackHolePunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackHolePunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackHolePunchResponse) ProtoMessage() {}

func (x *TrackHolePunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackHolePunchResponse.ProtoReflect.Descriptor instead.
func (*TrackHolePunchResponse) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{5}
}

var File_punchr_proto protoreflect.FileDescriptor

var file_punchr_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71,
	0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x22, 0x30, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x62, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c,
	0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x74,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x74,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x48, 0x6f, 0x6c, 0x65, 0x50,
	0x75, 0x6e, 0x63, 0x68, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2a, 0x7c, 0x0a, 0x12, 0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x45,
	0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x43, 0x48, 0x10, 0x05,
	0x32, 0xbd, 0x01, 0x0a, 0x0d, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x13, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x12,
	0x16, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48,
	0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64,
	0x65, 0x6e, 0x6e, 0x69, 0x73, 0x2d, 0x74, 0x72, 0x61, 0x2f, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x72,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_punchr_proto_rawDescOnce sync.Once
	file_punchr_proto_rawDescData = file_punchr_proto_rawDesc
)

func file_punchr_proto_rawDescGZIP() []byte {
	file_punchr_proto_rawDescOnce.Do(func() {
		file_punchr_proto_rawDescData = protoimpl.X.CompressGZIP(file_punchr_proto_rawDescData)
	})
	return file_punchr_proto_rawDescData
}

var file_punchr_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_punchr_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_punchr_proto_goTypes = []interface{}{
	(HolePunchEndReason)(0),        // 0: HolePunchEndReason
	(*RegisterRequest)(nil),        // 1: RegisterRequest
	(*RegisterResponse)(nil),       // 2: RegisterResponse
	(*GetAddrInfoRequest)(nil),     // 3: GetAddrInfoRequest
	(*GetAddrInfoResponse)(nil),    // 4: GetAddrInfoResponse
	(*TrackHolePunchRequest)(nil),  // 5: TrackHolePunchRequest
	(*TrackHolePunchResponse)(nil), // 6: TrackHolePunchResponse
}
var file_punchr_proto_depIdxs = []int32{
	0, // 0: TrackHolePunchRequest.end_reason:type_name -> HolePunchEndReason
	1, // 1: PunchrService.Register:input_type -> RegisterRequest
	3, // 2: PunchrService.GetAddrInfo:input_type -> GetAddrInfoRequest
	5, // 3: PunchrService.TrackHolePunch:input_type -> TrackHolePunchRequest
	2, // 4: PunchrService.Register:output_type -> RegisterResponse
	4, // 5: PunchrService.GetAddrInfo:output_type -> GetAddrInfoResponse
	6, // 6: PunchrService.TrackHolePunch:output_type -> TrackHolePunchResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_punchr_proto_init() }
func file_punchr_proto_init() {
	if File_punchr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_punchr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddrInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddrInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackHolePunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackHolePunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_punchr_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_punchr_proto_goTypes,
		DependencyIndexes: file_punchr_proto_depIdxs,
		EnumInfos:         file_punchr_proto_enumTypes,
		MessageInfos:      file_punchr_proto_msgTypes,
	}.Build()
	File_punchr_proto = out.File
	file_punchr_proto_rawDesc = nil
	file_punchr_proto_goTypes = nil
	file_punchr_proto_depIdxs = nil
}
