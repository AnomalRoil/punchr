// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPortMappings(t *testing.T) {
	t.Parallel()

	query := PortMappings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPortMappingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPortMappingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PortMappings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPortMappingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PortMappingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPortMappingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PortMappingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PortMapping exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PortMappingExists to return true, but got false.")
	}
}

func testPortMappingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	portMappingFound, err := FindPortMapping(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if portMappingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPortMappingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PortMappings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPortMappingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PortMappings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPortMappingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portMappingOne := &PortMapping{}
	portMappingTwo := &PortMapping{}
	if err = randomize.Struct(seed, portMappingOne, portMappingDBTypes, false, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}
	if err = randomize.Struct(seed, portMappingTwo, portMappingDBTypes, false, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = portMappingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = portMappingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PortMappings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPortMappingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	portMappingOne := &PortMapping{}
	portMappingTwo := &PortMapping{}
	if err = randomize.Struct(seed, portMappingOne, portMappingDBTypes, false, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}
	if err = randomize.Struct(seed, portMappingTwo, portMappingDBTypes, false, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = portMappingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = portMappingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func portMappingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PortMapping) error {
	*o = PortMapping{}
	return nil
}

func portMappingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PortMapping) error {
	*o = PortMapping{}
	return nil
}

func portMappingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PortMapping) error {
	*o = PortMapping{}
	return nil
}

func portMappingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PortMapping) error {
	*o = PortMapping{}
	return nil
}

func portMappingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PortMapping) error {
	*o = PortMapping{}
	return nil
}

func portMappingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PortMapping) error {
	*o = PortMapping{}
	return nil
}

func portMappingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PortMapping) error {
	*o = PortMapping{}
	return nil
}

func portMappingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PortMapping) error {
	*o = PortMapping{}
	return nil
}

func portMappingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PortMapping) error {
	*o = PortMapping{}
	return nil
}

func testPortMappingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PortMapping{}
	o := &PortMapping{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, portMappingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PortMapping object: %s", err)
	}

	AddPortMappingHook(boil.BeforeInsertHook, portMappingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	portMappingBeforeInsertHooks = []PortMappingHook{}

	AddPortMappingHook(boil.AfterInsertHook, portMappingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	portMappingAfterInsertHooks = []PortMappingHook{}

	AddPortMappingHook(boil.AfterSelectHook, portMappingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	portMappingAfterSelectHooks = []PortMappingHook{}

	AddPortMappingHook(boil.BeforeUpdateHook, portMappingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	portMappingBeforeUpdateHooks = []PortMappingHook{}

	AddPortMappingHook(boil.AfterUpdateHook, portMappingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	portMappingAfterUpdateHooks = []PortMappingHook{}

	AddPortMappingHook(boil.BeforeDeleteHook, portMappingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	portMappingBeforeDeleteHooks = []PortMappingHook{}

	AddPortMappingHook(boil.AfterDeleteHook, portMappingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	portMappingAfterDeleteHooks = []PortMappingHook{}

	AddPortMappingHook(boil.BeforeUpsertHook, portMappingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	portMappingBeforeUpsertHooks = []PortMappingHook{}

	AddPortMappingHook(boil.AfterUpsertHook, portMappingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	portMappingAfterUpsertHooks = []PortMappingHook{}
}

func testPortMappingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPortMappingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(portMappingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPortMappingToOneHolePunchResultUsingHolePunchResult(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PortMapping
	var foreign HolePunchResult

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, portMappingDBTypes, false, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, holePunchResultDBTypes, false, holePunchResultColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize HolePunchResult struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.HolePunchResultID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.HolePunchResult().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PortMappingSlice{&local}
	if err = local.L.LoadHolePunchResult(ctx, tx, false, (*[]*PortMapping)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HolePunchResult == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.HolePunchResult = nil
	if err = local.L.LoadHolePunchResult(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.HolePunchResult == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPortMappingToOneSetOpHolePunchResultUsingHolePunchResult(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PortMapping
	var b, c HolePunchResult

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, portMappingDBTypes, false, strmangle.SetComplement(portMappingPrimaryKeyColumns, portMappingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, holePunchResultDBTypes, false, strmangle.SetComplement(holePunchResultPrimaryKeyColumns, holePunchResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, holePunchResultDBTypes, false, strmangle.SetComplement(holePunchResultPrimaryKeyColumns, holePunchResultColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*HolePunchResult{&b, &c} {
		err = a.SetHolePunchResult(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.HolePunchResult != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PortMappings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.HolePunchResultID != x.ID {
			t.Error("foreign key was wrong value", a.HolePunchResultID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.HolePunchResultID))
		reflect.Indirect(reflect.ValueOf(&a.HolePunchResultID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.HolePunchResultID != x.ID {
			t.Error("foreign key was wrong value", a.HolePunchResultID, x.ID)
		}
	}
}

func testPortMappingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPortMappingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PortMappingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPortMappingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PortMappings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	portMappingDBTypes = map[string]string{`ID`: `integer`, `HolePunchResultID`: `integer`, `InternalPort`: `integer`, `ExternalPort`: `integer`, `Protocol`: `text`, `Addr`: `text`, `AddrNetwork`: `text`}
	_                  = bytes.MinRead
)

func testPortMappingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(portMappingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(portMappingAllColumns) == len(portMappingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPortMappingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(portMappingAllColumns) == len(portMappingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PortMapping{}
	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, portMappingDBTypes, true, portMappingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(portMappingAllColumns, portMappingPrimaryKeyColumns) {
		fields = portMappingAllColumns
	} else {
		fields = strmangle.SetComplement(
			portMappingAllColumns,
			portMappingPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, portMappingGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PortMappingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPortMappingsUpsert(t *testing.T) {
	t.Parallel()

	if len(portMappingAllColumns) == len(portMappingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PortMapping{}
	if err = randomize.Struct(seed, &o, portMappingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PortMapping: %s", err)
	}

	count, err := PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, portMappingDBTypes, false, portMappingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PortMapping struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PortMapping: %s", err)
	}

	count, err = PortMappings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
