// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HolePunchResult is an object representing the database table.
type HolePunchResult struct {
	ID              int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ClientID        int64       `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	RemoteID        int64       `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	StartRTT        string      `boil:"start_rtt" json:"start_rtt" toml:"start_rtt" yaml:"start_rtt"`
	ElapsedTime     string      `boil:"elapsed_time" json:"elapsed_time" toml:"elapsed_time" yaml:"elapsed_time"`
	EndReason       string      `boil:"end_reason" json:"end_reason" toml:"end_reason" yaml:"end_reason"`
	Attempts        int16       `boil:"attempts" json:"attempts" toml:"attempts" yaml:"attempts"`
	Success         bool        `boil:"success" json:"success" toml:"success" yaml:"success"`
	Error           null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`
	DirectDialError null.String `boil:"direct_dial_error" json:"direct_dial_error,omitempty" toml:"direct_dial_error" yaml:"direct_dial_error,omitempty"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *holePunchResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L holePunchResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HolePunchResultColumns = struct {
	ID              string
	ClientID        string
	RemoteID        string
	StartRTT        string
	ElapsedTime     string
	EndReason       string
	Attempts        string
	Success         string
	Error           string
	DirectDialError string
	UpdatedAt       string
	CreatedAt       string
}{
	ID:              "id",
	ClientID:        "client_id",
	RemoteID:        "remote_id",
	StartRTT:        "start_rtt",
	ElapsedTime:     "elapsed_time",
	EndReason:       "end_reason",
	Attempts:        "attempts",
	Success:         "success",
	Error:           "error",
	DirectDialError: "direct_dial_error",
	UpdatedAt:       "updated_at",
	CreatedAt:       "created_at",
}

var HolePunchResultTableColumns = struct {
	ID              string
	ClientID        string
	RemoteID        string
	StartRTT        string
	ElapsedTime     string
	EndReason       string
	Attempts        string
	Success         string
	Error           string
	DirectDialError string
	UpdatedAt       string
	CreatedAt       string
}{
	ID:              "hole_punch_results.id",
	ClientID:        "hole_punch_results.client_id",
	RemoteID:        "hole_punch_results.remote_id",
	StartRTT:        "hole_punch_results.start_rtt",
	ElapsedTime:     "hole_punch_results.elapsed_time",
	EndReason:       "hole_punch_results.end_reason",
	Attempts:        "hole_punch_results.attempts",
	Success:         "hole_punch_results.success",
	Error:           "hole_punch_results.error",
	DirectDialError: "hole_punch_results.direct_dial_error",
	UpdatedAt:       "hole_punch_results.updated_at",
	CreatedAt:       "hole_punch_results.created_at",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var HolePunchResultWhere = struct {
	ID              whereHelperint
	ClientID        whereHelperint64
	RemoteID        whereHelperint64
	StartRTT        whereHelperstring
	ElapsedTime     whereHelperstring
	EndReason       whereHelperstring
	Attempts        whereHelperint16
	Success         whereHelperbool
	Error           whereHelpernull_String
	DirectDialError whereHelpernull_String
	UpdatedAt       whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
}{
	ID:              whereHelperint{field: "\"hole_punch_results\".\"id\""},
	ClientID:        whereHelperint64{field: "\"hole_punch_results\".\"client_id\""},
	RemoteID:        whereHelperint64{field: "\"hole_punch_results\".\"remote_id\""},
	StartRTT:        whereHelperstring{field: "\"hole_punch_results\".\"start_rtt\""},
	ElapsedTime:     whereHelperstring{field: "\"hole_punch_results\".\"elapsed_time\""},
	EndReason:       whereHelperstring{field: "\"hole_punch_results\".\"end_reason\""},
	Attempts:        whereHelperint16{field: "\"hole_punch_results\".\"attempts\""},
	Success:         whereHelperbool{field: "\"hole_punch_results\".\"success\""},
	Error:           whereHelpernull_String{field: "\"hole_punch_results\".\"error\""},
	DirectDialError: whereHelpernull_String{field: "\"hole_punch_results\".\"direct_dial_error\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"hole_punch_results\".\"updated_at\""},
	CreatedAt:       whereHelpertime_Time{field: "\"hole_punch_results\".\"created_at\""},
}

// HolePunchResultRels is where relationship names are stored.
var HolePunchResultRels = struct {
	Client         string
	Remote         string
	MultiAddresses string
}{
	Client:         "Client",
	Remote:         "Remote",
	MultiAddresses: "MultiAddresses",
}

// holePunchResultR is where relationships are stored.
type holePunchResultR struct {
	Client         *Peer             `boil:"Client" json:"Client" toml:"Client" yaml:"Client"`
	Remote         *Peer             `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
	MultiAddresses MultiAddressSlice `boil:"MultiAddresses" json:"MultiAddresses" toml:"MultiAddresses" yaml:"MultiAddresses"`
}

// NewStruct creates a new relationship struct
func (*holePunchResultR) NewStruct() *holePunchResultR {
	return &holePunchResultR{}
}

// holePunchResultL is where Load methods for each relationship are stored.
type holePunchResultL struct{}

var (
	holePunchResultAllColumns            = []string{"id", "client_id", "remote_id", "start_rtt", "elapsed_time", "end_reason", "attempts", "success", "error", "direct_dial_error", "updated_at", "created_at"}
	holePunchResultColumnsWithoutDefault = []string{"client_id", "remote_id", "start_rtt", "elapsed_time", "end_reason", "attempts", "success", "error", "direct_dial_error", "updated_at", "created_at"}
	holePunchResultColumnsWithDefault    = []string{"id"}
	holePunchResultPrimaryKeyColumns     = []string{"id"}
)

type (
	// HolePunchResultSlice is an alias for a slice of pointers to HolePunchResult.
	// This should almost always be used instead of []HolePunchResult.
	HolePunchResultSlice []*HolePunchResult
	// HolePunchResultHook is the signature for custom HolePunchResult hook methods
	HolePunchResultHook func(context.Context, boil.ContextExecutor, *HolePunchResult) error

	holePunchResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	holePunchResultType                 = reflect.TypeOf(&HolePunchResult{})
	holePunchResultMapping              = queries.MakeStructMapping(holePunchResultType)
	holePunchResultPrimaryKeyMapping, _ = queries.BindMapping(holePunchResultType, holePunchResultMapping, holePunchResultPrimaryKeyColumns)
	holePunchResultInsertCacheMut       sync.RWMutex
	holePunchResultInsertCache          = make(map[string]insertCache)
	holePunchResultUpdateCacheMut       sync.RWMutex
	holePunchResultUpdateCache          = make(map[string]updateCache)
	holePunchResultUpsertCacheMut       sync.RWMutex
	holePunchResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var holePunchResultBeforeInsertHooks []HolePunchResultHook
var holePunchResultBeforeUpdateHooks []HolePunchResultHook
var holePunchResultBeforeDeleteHooks []HolePunchResultHook
var holePunchResultBeforeUpsertHooks []HolePunchResultHook

var holePunchResultAfterInsertHooks []HolePunchResultHook
var holePunchResultAfterSelectHooks []HolePunchResultHook
var holePunchResultAfterUpdateHooks []HolePunchResultHook
var holePunchResultAfterDeleteHooks []HolePunchResultHook
var holePunchResultAfterUpsertHooks []HolePunchResultHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HolePunchResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HolePunchResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HolePunchResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HolePunchResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HolePunchResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HolePunchResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HolePunchResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HolePunchResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HolePunchResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHolePunchResultHook registers your hook function for all future operations.
func AddHolePunchResultHook(hookPoint boil.HookPoint, holePunchResultHook HolePunchResultHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		holePunchResultBeforeInsertHooks = append(holePunchResultBeforeInsertHooks, holePunchResultHook)
	case boil.BeforeUpdateHook:
		holePunchResultBeforeUpdateHooks = append(holePunchResultBeforeUpdateHooks, holePunchResultHook)
	case boil.BeforeDeleteHook:
		holePunchResultBeforeDeleteHooks = append(holePunchResultBeforeDeleteHooks, holePunchResultHook)
	case boil.BeforeUpsertHook:
		holePunchResultBeforeUpsertHooks = append(holePunchResultBeforeUpsertHooks, holePunchResultHook)
	case boil.AfterInsertHook:
		holePunchResultAfterInsertHooks = append(holePunchResultAfterInsertHooks, holePunchResultHook)
	case boil.AfterSelectHook:
		holePunchResultAfterSelectHooks = append(holePunchResultAfterSelectHooks, holePunchResultHook)
	case boil.AfterUpdateHook:
		holePunchResultAfterUpdateHooks = append(holePunchResultAfterUpdateHooks, holePunchResultHook)
	case boil.AfterDeleteHook:
		holePunchResultAfterDeleteHooks = append(holePunchResultAfterDeleteHooks, holePunchResultHook)
	case boil.AfterUpsertHook:
		holePunchResultAfterUpsertHooks = append(holePunchResultAfterUpsertHooks, holePunchResultHook)
	}
}

// One returns a single holePunchResult record from the query.
func (q holePunchResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HolePunchResult, error) {
	o := &HolePunchResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hole_punch_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HolePunchResult records from the query.
func (q holePunchResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (HolePunchResultSlice, error) {
	var o []*HolePunchResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HolePunchResult slice")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HolePunchResult records in the query.
func (q holePunchResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hole_punch_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q holePunchResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hole_punch_results exists")
	}

	return count > 0, nil
}

// Client pointed to by the foreign key.
func (o *HolePunchResult) Client(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ClientID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// Remote pointed to by the foreign key.
func (o *HolePunchResult) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	query := Peers(queryMods...)
	queries.SetFrom(query.Query, "\"peers\"")

	return query
}

// MultiAddresses retrieves all the multi_address's MultiAddresses with an executor.
func (o *HolePunchResult) MultiAddresses(mods ...qm.QueryMod) multiAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"hole_punch_results_x_multi_addresses\" on \"multi_addresses\".\"id\" = \"hole_punch_results_x_multi_addresses\".\"multi_address_id\""),
		qm.Where("\"hole_punch_results_x_multi_addresses\".\"hole_punch_result\"=?", o.ID),
	)

	query := MultiAddresses(queryMods...)
	queries.SetFrom(query.Query, "\"multi_addresses\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"multi_addresses\".*"})
	}

	return query
}

// LoadClient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (holePunchResultL) LoadClient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResult interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResult
	var object *HolePunchResult

	if singular {
		object = maybeHolePunchResult.(*HolePunchResult)
	} else {
		slice = *maybeHolePunchResult.(*[]*HolePunchResult)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultR{}
		}
		args = append(args, object.ClientID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultR{}
			}

			for _, a := range args {
				if a == obj.ClientID {
					continue Outer
				}
			}

			args = append(args, obj.ClientID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Client = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.ClientHolePunchResults = append(foreign.R.ClientHolePunchResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClientID == foreign.ID {
				local.R.Client = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.ClientHolePunchResults = append(foreign.R.ClientHolePunchResults, local)
				break
			}
		}
	}

	return nil
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (holePunchResultL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResult interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResult
	var object *HolePunchResult

	if singular {
		object = maybeHolePunchResult.(*HolePunchResult)
	} else {
		slice = *maybeHolePunchResult.(*[]*HolePunchResult)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteHolePunchResults = append(foreign.R.RemoteHolePunchResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteHolePunchResults = append(foreign.R.RemoteHolePunchResults, local)
				break
			}
		}
	}

	return nil
}

// LoadMultiAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (holePunchResultL) LoadMultiAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResult interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResult
	var object *HolePunchResult

	if singular {
		object = maybeHolePunchResult.(*HolePunchResult)
	} else {
		slice = *maybeHolePunchResult.(*[]*HolePunchResult)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"multi_addresses\".id, \"multi_addresses\".maddr, \"multi_addresses\".country, \"multi_addresses\".continent, \"multi_addresses\".asn, \"multi_addresses\".is_public, \"multi_addresses\".is_relay, \"multi_addresses\".ip_address_count, \"multi_addresses\".updated_at, \"multi_addresses\".created_at, \"a\".\"hole_punch_result\""),
		qm.From("\"multi_addresses\""),
		qm.InnerJoin("\"hole_punch_results_x_multi_addresses\" as \"a\" on \"multi_addresses\".\"id\" = \"a\".\"multi_address_id\""),
		qm.WhereIn("\"a\".\"hole_punch_result\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load multi_addresses")
	}

	var resultSlice []*MultiAddress

	var localJoinCols []int
	for results.Next() {
		one := new(MultiAddress)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Maddr, &one.Country, &one.Continent, &one.Asn, &one.IsPublic, &one.IsRelay, &one.IPAddressCount, &one.UpdatedAt, &one.CreatedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for multi_addresses")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice multi_addresses")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on multi_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multi_addresses")
	}

	if len(multiAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MultiAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &multiAddressR{}
			}
			foreign.R.HolePunchResults = append(foreign.R.HolePunchResults, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.MultiAddresses = append(local.R.MultiAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &multiAddressR{}
				}
				foreign.R.HolePunchResults = append(foreign.R.HolePunchResults, local)
				break
			}
		}
	}

	return nil
}

// SetClient of the holePunchResult to the related item.
// Sets o.R.Client to related.
// Adds o to related.R.ClientHolePunchResults.
func (o *HolePunchResult) SetClient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hole_punch_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"client_id"}),
		strmangle.WhereClause("\"", "\"", 2, holePunchResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClientID = related.ID
	if o.R == nil {
		o.R = &holePunchResultR{
			Client: related,
		}
	} else {
		o.R.Client = related
	}

	if related.R == nil {
		related.R = &peerR{
			ClientHolePunchResults: HolePunchResultSlice{o},
		}
	} else {
		related.R.ClientHolePunchResults = append(related.R.ClientHolePunchResults, o)
	}

	return nil
}

// SetRemote of the holePunchResult to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteHolePunchResults.
func (o *HolePunchResult) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hole_punch_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, holePunchResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &holePunchResultR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteHolePunchResults: HolePunchResultSlice{o},
		}
	} else {
		related.R.RemoteHolePunchResults = append(related.R.RemoteHolePunchResults, o)
	}

	return nil
}

// AddMultiAddresses adds the given related objects to the existing relationships
// of the hole_punch_result, optionally inserting them as new records.
// Appends related to o.R.MultiAddresses.
// Sets related.R.HolePunchResults appropriately.
func (o *HolePunchResult) AddMultiAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MultiAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"hole_punch_results_x_multi_addresses\" (\"hole_punch_result\", \"multi_address_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &holePunchResultR{
			MultiAddresses: related,
		}
	} else {
		o.R.MultiAddresses = append(o.R.MultiAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &multiAddressR{
				HolePunchResults: HolePunchResultSlice{o},
			}
		} else {
			rel.R.HolePunchResults = append(rel.R.HolePunchResults, o)
		}
	}
	return nil
}

// SetMultiAddresses removes all previously related items of the
// hole_punch_result replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.HolePunchResults's MultiAddresses accordingly.
// Replaces o.R.MultiAddresses with related.
// Sets related.R.HolePunchResults's MultiAddresses accordingly.
func (o *HolePunchResult) SetMultiAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MultiAddress) error {
	query := "delete from \"hole_punch_results_x_multi_addresses\" where \"hole_punch_result\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeMultiAddressesFromHolePunchResultsSlice(o, related)
	if o.R != nil {
		o.R.MultiAddresses = nil
	}
	return o.AddMultiAddresses(ctx, exec, insert, related...)
}

// RemoveMultiAddresses relationships from objects passed in.
// Removes related items from R.MultiAddresses (uses pointer comparison, removal does not keep order)
// Sets related.R.HolePunchResults.
func (o *HolePunchResult) RemoveMultiAddresses(ctx context.Context, exec boil.ContextExecutor, related ...*MultiAddress) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"hole_punch_results_x_multi_addresses\" where \"hole_punch_result\" = $1 and \"multi_address_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeMultiAddressesFromHolePunchResultsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MultiAddresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.MultiAddresses)
			if ln > 1 && i < ln-1 {
				o.R.MultiAddresses[i] = o.R.MultiAddresses[ln-1]
			}
			o.R.MultiAddresses = o.R.MultiAddresses[:ln-1]
			break
		}
	}

	return nil
}

func removeMultiAddressesFromHolePunchResultsSlice(o *HolePunchResult, related []*MultiAddress) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.HolePunchResults {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.HolePunchResults)
			if ln > 1 && i < ln-1 {
				rel.R.HolePunchResults[i] = rel.R.HolePunchResults[ln-1]
			}
			rel.R.HolePunchResults = rel.R.HolePunchResults[:ln-1]
			break
		}
	}
}

// HolePunchResults retrieves all the records using an executor.
func HolePunchResults(mods ...qm.QueryMod) holePunchResultQuery {
	mods = append(mods, qm.From("\"hole_punch_results\""))
	return holePunchResultQuery{NewQuery(mods...)}
}

// FindHolePunchResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHolePunchResult(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*HolePunchResult, error) {
	holePunchResultObj := &HolePunchResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hole_punch_results\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, holePunchResultObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hole_punch_results")
	}

	if err = holePunchResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return holePunchResultObj, err
	}

	return holePunchResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HolePunchResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hole_punch_results provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(holePunchResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	holePunchResultInsertCacheMut.RLock()
	cache, cached := holePunchResultInsertCache[key]
	holePunchResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			holePunchResultAllColumns,
			holePunchResultColumnsWithDefault,
			holePunchResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hole_punch_results\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hole_punch_results\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hole_punch_results")
	}

	if !cached {
		holePunchResultInsertCacheMut.Lock()
		holePunchResultInsertCache[key] = cache
		holePunchResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HolePunchResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HolePunchResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	holePunchResultUpdateCacheMut.RLock()
	cache, cached := holePunchResultUpdateCache[key]
	holePunchResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			holePunchResultAllColumns,
			holePunchResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hole_punch_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hole_punch_results\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, holePunchResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, append(wl, holePunchResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hole_punch_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hole_punch_results")
	}

	if !cached {
		holePunchResultUpdateCacheMut.Lock()
		holePunchResultUpdateCache[key] = cache
		holePunchResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q holePunchResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hole_punch_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hole_punch_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HolePunchResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), holePunchResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hole_punch_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, holePunchResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in holePunchResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all holePunchResult")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HolePunchResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hole_punch_results provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(holePunchResultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	holePunchResultUpsertCacheMut.RLock()
	cache, cached := holePunchResultUpsertCache[key]
	holePunchResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			holePunchResultAllColumns,
			holePunchResultColumnsWithDefault,
			holePunchResultColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			holePunchResultAllColumns,
			holePunchResultPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hole_punch_results, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(holePunchResultPrimaryKeyColumns))
			copy(conflict, holePunchResultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hole_punch_results\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hole_punch_results")
	}

	if !cached {
		holePunchResultUpsertCacheMut.Lock()
		holePunchResultUpsertCache[key] = cache
		holePunchResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HolePunchResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HolePunchResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HolePunchResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), holePunchResultPrimaryKeyMapping)
	sql := "DELETE FROM \"hole_punch_results\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hole_punch_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hole_punch_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q holePunchResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no holePunchResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hole_punch_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hole_punch_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HolePunchResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(holePunchResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), holePunchResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hole_punch_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, holePunchResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from holePunchResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hole_punch_results")
	}

	if len(holePunchResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HolePunchResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHolePunchResult(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HolePunchResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HolePunchResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), holePunchResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hole_punch_results\".* FROM \"hole_punch_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, holePunchResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HolePunchResultSlice")
	}

	*o = slice

	return nil
}

// HolePunchResultExists checks if the HolePunchResult row exists.
func HolePunchResultExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hole_punch_results\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hole_punch_results exists")
	}

	return exists, nil
}
