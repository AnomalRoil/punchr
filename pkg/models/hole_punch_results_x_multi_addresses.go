// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// HolePunchResultsXMultiAddress is an object representing the database table.
type HolePunchResultsXMultiAddress struct {
	HolePunchResultID int    `boil:"hole_punch_result_id" json:"hole_punch_result_id" toml:"hole_punch_result_id" yaml:"hole_punch_result_id"`
	MultiAddressID    int64  `boil:"multi_address_id" json:"multi_address_id" toml:"multi_address_id" yaml:"multi_address_id"`
	Relationship      string `boil:"relationship" json:"relationship" toml:"relationship" yaml:"relationship"`

	R *holePunchResultsXMultiAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L holePunchResultsXMultiAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HolePunchResultsXMultiAddressColumns = struct {
	HolePunchResultID string
	MultiAddressID    string
	Relationship      string
}{
	HolePunchResultID: "hole_punch_result_id",
	MultiAddressID:    "multi_address_id",
	Relationship:      "relationship",
}

var HolePunchResultsXMultiAddressTableColumns = struct {
	HolePunchResultID string
	MultiAddressID    string
	Relationship      string
}{
	HolePunchResultID: "hole_punch_results_x_multi_addresses.hole_punch_result_id",
	MultiAddressID:    "hole_punch_results_x_multi_addresses.multi_address_id",
	Relationship:      "hole_punch_results_x_multi_addresses.relationship",
}

// Generated where

var HolePunchResultsXMultiAddressWhere = struct {
	HolePunchResultID whereHelperint
	MultiAddressID    whereHelperint64
	Relationship      whereHelperstring
}{
	HolePunchResultID: whereHelperint{field: "\"hole_punch_results_x_multi_addresses\".\"hole_punch_result_id\""},
	MultiAddressID:    whereHelperint64{field: "\"hole_punch_results_x_multi_addresses\".\"multi_address_id\""},
	Relationship:      whereHelperstring{field: "\"hole_punch_results_x_multi_addresses\".\"relationship\""},
}

// HolePunchResultsXMultiAddressRels is where relationship names are stored.
var HolePunchResultsXMultiAddressRels = struct {
	HolePunchResult string
	MultiAddress    string
}{
	HolePunchResult: "HolePunchResult",
	MultiAddress:    "MultiAddress",
}

// holePunchResultsXMultiAddressR is where relationships are stored.
type holePunchResultsXMultiAddressR struct {
	HolePunchResult *HolePunchResult `boil:"HolePunchResult" json:"HolePunchResult" toml:"HolePunchResult" yaml:"HolePunchResult"`
	MultiAddress    *MultiAddress    `boil:"MultiAddress" json:"MultiAddress" toml:"MultiAddress" yaml:"MultiAddress"`
}

// NewStruct creates a new relationship struct
func (*holePunchResultsXMultiAddressR) NewStruct() *holePunchResultsXMultiAddressR {
	return &holePunchResultsXMultiAddressR{}
}

// holePunchResultsXMultiAddressL is where Load methods for each relationship are stored.
type holePunchResultsXMultiAddressL struct{}

var (
	holePunchResultsXMultiAddressAllColumns            = []string{"hole_punch_result_id", "multi_address_id", "relationship"}
	holePunchResultsXMultiAddressColumnsWithoutDefault = []string{"hole_punch_result_id", "multi_address_id", "relationship"}
	holePunchResultsXMultiAddressColumnsWithDefault    = []string{}
	holePunchResultsXMultiAddressPrimaryKeyColumns     = []string{"multi_address_id", "hole_punch_result_id", "relationship"}
)

type (
	// HolePunchResultsXMultiAddressSlice is an alias for a slice of pointers to HolePunchResultsXMultiAddress.
	// This should almost always be used instead of []HolePunchResultsXMultiAddress.
	HolePunchResultsXMultiAddressSlice []*HolePunchResultsXMultiAddress
	// HolePunchResultsXMultiAddressHook is the signature for custom HolePunchResultsXMultiAddress hook methods
	HolePunchResultsXMultiAddressHook func(context.Context, boil.ContextExecutor, *HolePunchResultsXMultiAddress) error

	holePunchResultsXMultiAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	holePunchResultsXMultiAddressType                 = reflect.TypeOf(&HolePunchResultsXMultiAddress{})
	holePunchResultsXMultiAddressMapping              = queries.MakeStructMapping(holePunchResultsXMultiAddressType)
	holePunchResultsXMultiAddressPrimaryKeyMapping, _ = queries.BindMapping(holePunchResultsXMultiAddressType, holePunchResultsXMultiAddressMapping, holePunchResultsXMultiAddressPrimaryKeyColumns)
	holePunchResultsXMultiAddressInsertCacheMut       sync.RWMutex
	holePunchResultsXMultiAddressInsertCache          = make(map[string]insertCache)
	holePunchResultsXMultiAddressUpdateCacheMut       sync.RWMutex
	holePunchResultsXMultiAddressUpdateCache          = make(map[string]updateCache)
	holePunchResultsXMultiAddressUpsertCacheMut       sync.RWMutex
	holePunchResultsXMultiAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var holePunchResultsXMultiAddressBeforeInsertHooks []HolePunchResultsXMultiAddressHook
var holePunchResultsXMultiAddressBeforeUpdateHooks []HolePunchResultsXMultiAddressHook
var holePunchResultsXMultiAddressBeforeDeleteHooks []HolePunchResultsXMultiAddressHook
var holePunchResultsXMultiAddressBeforeUpsertHooks []HolePunchResultsXMultiAddressHook

var holePunchResultsXMultiAddressAfterInsertHooks []HolePunchResultsXMultiAddressHook
var holePunchResultsXMultiAddressAfterSelectHooks []HolePunchResultsXMultiAddressHook
var holePunchResultsXMultiAddressAfterUpdateHooks []HolePunchResultsXMultiAddressHook
var holePunchResultsXMultiAddressAfterDeleteHooks []HolePunchResultsXMultiAddressHook
var holePunchResultsXMultiAddressAfterUpsertHooks []HolePunchResultsXMultiAddressHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HolePunchResultsXMultiAddress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultsXMultiAddressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HolePunchResultsXMultiAddress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultsXMultiAddressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HolePunchResultsXMultiAddress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultsXMultiAddressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HolePunchResultsXMultiAddress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultsXMultiAddressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HolePunchResultsXMultiAddress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultsXMultiAddressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HolePunchResultsXMultiAddress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultsXMultiAddressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HolePunchResultsXMultiAddress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultsXMultiAddressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HolePunchResultsXMultiAddress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultsXMultiAddressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HolePunchResultsXMultiAddress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultsXMultiAddressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHolePunchResultsXMultiAddressHook registers your hook function for all future operations.
func AddHolePunchResultsXMultiAddressHook(hookPoint boil.HookPoint, holePunchResultsXMultiAddressHook HolePunchResultsXMultiAddressHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		holePunchResultsXMultiAddressBeforeInsertHooks = append(holePunchResultsXMultiAddressBeforeInsertHooks, holePunchResultsXMultiAddressHook)
	case boil.BeforeUpdateHook:
		holePunchResultsXMultiAddressBeforeUpdateHooks = append(holePunchResultsXMultiAddressBeforeUpdateHooks, holePunchResultsXMultiAddressHook)
	case boil.BeforeDeleteHook:
		holePunchResultsXMultiAddressBeforeDeleteHooks = append(holePunchResultsXMultiAddressBeforeDeleteHooks, holePunchResultsXMultiAddressHook)
	case boil.BeforeUpsertHook:
		holePunchResultsXMultiAddressBeforeUpsertHooks = append(holePunchResultsXMultiAddressBeforeUpsertHooks, holePunchResultsXMultiAddressHook)
	case boil.AfterInsertHook:
		holePunchResultsXMultiAddressAfterInsertHooks = append(holePunchResultsXMultiAddressAfterInsertHooks, holePunchResultsXMultiAddressHook)
	case boil.AfterSelectHook:
		holePunchResultsXMultiAddressAfterSelectHooks = append(holePunchResultsXMultiAddressAfterSelectHooks, holePunchResultsXMultiAddressHook)
	case boil.AfterUpdateHook:
		holePunchResultsXMultiAddressAfterUpdateHooks = append(holePunchResultsXMultiAddressAfterUpdateHooks, holePunchResultsXMultiAddressHook)
	case boil.AfterDeleteHook:
		holePunchResultsXMultiAddressAfterDeleteHooks = append(holePunchResultsXMultiAddressAfterDeleteHooks, holePunchResultsXMultiAddressHook)
	case boil.AfterUpsertHook:
		holePunchResultsXMultiAddressAfterUpsertHooks = append(holePunchResultsXMultiAddressAfterUpsertHooks, holePunchResultsXMultiAddressHook)
	}
}

// One returns a single holePunchResultsXMultiAddress record from the query.
func (q holePunchResultsXMultiAddressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HolePunchResultsXMultiAddress, error) {
	o := &HolePunchResultsXMultiAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hole_punch_results_x_multi_addresses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HolePunchResultsXMultiAddress records from the query.
func (q holePunchResultsXMultiAddressQuery) All(ctx context.Context, exec boil.ContextExecutor) (HolePunchResultsXMultiAddressSlice, error) {
	var o []*HolePunchResultsXMultiAddress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HolePunchResultsXMultiAddress slice")
	}

	if len(holePunchResultsXMultiAddressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HolePunchResultsXMultiAddress records in the query.
func (q holePunchResultsXMultiAddressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hole_punch_results_x_multi_addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q holePunchResultsXMultiAddressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hole_punch_results_x_multi_addresses exists")
	}

	return count > 0, nil
}

// HolePunchResult pointed to by the foreign key.
func (o *HolePunchResultsXMultiAddress) HolePunchResult(mods ...qm.QueryMod) holePunchResultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HolePunchResultID),
	}

	queryMods = append(queryMods, mods...)

	query := HolePunchResults(queryMods...)
	queries.SetFrom(query.Query, "\"hole_punch_results\"")

	return query
}

// MultiAddress pointed to by the foreign key.
func (o *HolePunchResultsXMultiAddress) MultiAddress(mods ...qm.QueryMod) multiAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MultiAddressID),
	}

	queryMods = append(queryMods, mods...)

	query := MultiAddresses(queryMods...)
	queries.SetFrom(query.Query, "\"multi_addresses\"")

	return query
}

// LoadHolePunchResult allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (holePunchResultsXMultiAddressL) LoadHolePunchResult(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResultsXMultiAddress interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResultsXMultiAddress
	var object *HolePunchResultsXMultiAddress

	if singular {
		object = maybeHolePunchResultsXMultiAddress.(*HolePunchResultsXMultiAddress)
	} else {
		slice = *maybeHolePunchResultsXMultiAddress.(*[]*HolePunchResultsXMultiAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultsXMultiAddressR{}
		}
		args = append(args, object.HolePunchResultID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultsXMultiAddressR{}
			}

			for _, a := range args {
				if a == obj.HolePunchResultID {
					continue Outer
				}
			}

			args = append(args, obj.HolePunchResultID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hole_punch_results`),
		qm.WhereIn(`hole_punch_results.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HolePunchResult")
	}

	var resultSlice []*HolePunchResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HolePunchResult")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hole_punch_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hole_punch_results")
	}

	if len(holePunchResultsXMultiAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HolePunchResult = foreign
		if foreign.R == nil {
			foreign.R = &holePunchResultR{}
		}
		foreign.R.HolePunchResultsXMultiAddresses = append(foreign.R.HolePunchResultsXMultiAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HolePunchResultID == foreign.ID {
				local.R.HolePunchResult = foreign
				if foreign.R == nil {
					foreign.R = &holePunchResultR{}
				}
				foreign.R.HolePunchResultsXMultiAddresses = append(foreign.R.HolePunchResultsXMultiAddresses, local)
				break
			}
		}
	}

	return nil
}

// LoadMultiAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (holePunchResultsXMultiAddressL) LoadMultiAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResultsXMultiAddress interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResultsXMultiAddress
	var object *HolePunchResultsXMultiAddress

	if singular {
		object = maybeHolePunchResultsXMultiAddress.(*HolePunchResultsXMultiAddress)
	} else {
		slice = *maybeHolePunchResultsXMultiAddress.(*[]*HolePunchResultsXMultiAddress)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultsXMultiAddressR{}
		}
		args = append(args, object.MultiAddressID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultsXMultiAddressR{}
			}

			for _, a := range args {
				if a == obj.MultiAddressID {
					continue Outer
				}
			}

			args = append(args, obj.MultiAddressID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`multi_addresses`),
		qm.WhereIn(`multi_addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MultiAddress")
	}

	var resultSlice []*MultiAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MultiAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for multi_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multi_addresses")
	}

	if len(holePunchResultsXMultiAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MultiAddress = foreign
		if foreign.R == nil {
			foreign.R = &multiAddressR{}
		}
		foreign.R.HolePunchResultsXMultiAddresses = append(foreign.R.HolePunchResultsXMultiAddresses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MultiAddressID == foreign.ID {
				local.R.MultiAddress = foreign
				if foreign.R == nil {
					foreign.R = &multiAddressR{}
				}
				foreign.R.HolePunchResultsXMultiAddresses = append(foreign.R.HolePunchResultsXMultiAddresses, local)
				break
			}
		}
	}

	return nil
}

// SetHolePunchResult of the holePunchResultsXMultiAddress to the related item.
// Sets o.R.HolePunchResult to related.
// Adds o to related.R.HolePunchResultsXMultiAddresses.
func (o *HolePunchResultsXMultiAddress) SetHolePunchResult(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HolePunchResult) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hole_punch_results_x_multi_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hole_punch_result_id"}),
		strmangle.WhereClause("\"", "\"", 2, holePunchResultsXMultiAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MultiAddressID, o.HolePunchResultID, o.Relationship}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HolePunchResultID = related.ID
	if o.R == nil {
		o.R = &holePunchResultsXMultiAddressR{
			HolePunchResult: related,
		}
	} else {
		o.R.HolePunchResult = related
	}

	if related.R == nil {
		related.R = &holePunchResultR{
			HolePunchResultsXMultiAddresses: HolePunchResultsXMultiAddressSlice{o},
		}
	} else {
		related.R.HolePunchResultsXMultiAddresses = append(related.R.HolePunchResultsXMultiAddresses, o)
	}

	return nil
}

// SetMultiAddress of the holePunchResultsXMultiAddress to the related item.
// Sets o.R.MultiAddress to related.
// Adds o to related.R.HolePunchResultsXMultiAddresses.
func (o *HolePunchResultsXMultiAddress) SetMultiAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MultiAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hole_punch_results_x_multi_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"multi_address_id"}),
		strmangle.WhereClause("\"", "\"", 2, holePunchResultsXMultiAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.MultiAddressID, o.HolePunchResultID, o.Relationship}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MultiAddressID = related.ID
	if o.R == nil {
		o.R = &holePunchResultsXMultiAddressR{
			MultiAddress: related,
		}
	} else {
		o.R.MultiAddress = related
	}

	if related.R == nil {
		related.R = &multiAddressR{
			HolePunchResultsXMultiAddresses: HolePunchResultsXMultiAddressSlice{o},
		}
	} else {
		related.R.HolePunchResultsXMultiAddresses = append(related.R.HolePunchResultsXMultiAddresses, o)
	}

	return nil
}

// HolePunchResultsXMultiAddresses retrieves all the records using an executor.
func HolePunchResultsXMultiAddresses(mods ...qm.QueryMod) holePunchResultsXMultiAddressQuery {
	mods = append(mods, qm.From("\"hole_punch_results_x_multi_addresses\""))
	return holePunchResultsXMultiAddressQuery{NewQuery(mods...)}
}

// FindHolePunchResultsXMultiAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHolePunchResultsXMultiAddress(ctx context.Context, exec boil.ContextExecutor, multiAddressID int64, holePunchResultID int, relationship string, selectCols ...string) (*HolePunchResultsXMultiAddress, error) {
	holePunchResultsXMultiAddressObj := &HolePunchResultsXMultiAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hole_punch_results_x_multi_addresses\" where \"multi_address_id\"=$1 AND \"hole_punch_result_id\"=$2 AND \"relationship\"=$3", sel,
	)

	q := queries.Raw(query, multiAddressID, holePunchResultID, relationship)

	err := q.Bind(ctx, exec, holePunchResultsXMultiAddressObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hole_punch_results_x_multi_addresses")
	}

	if err = holePunchResultsXMultiAddressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return holePunchResultsXMultiAddressObj, err
	}

	return holePunchResultsXMultiAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HolePunchResultsXMultiAddress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hole_punch_results_x_multi_addresses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(holePunchResultsXMultiAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	holePunchResultsXMultiAddressInsertCacheMut.RLock()
	cache, cached := holePunchResultsXMultiAddressInsertCache[key]
	holePunchResultsXMultiAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			holePunchResultsXMultiAddressAllColumns,
			holePunchResultsXMultiAddressColumnsWithDefault,
			holePunchResultsXMultiAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(holePunchResultsXMultiAddressType, holePunchResultsXMultiAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(holePunchResultsXMultiAddressType, holePunchResultsXMultiAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hole_punch_results_x_multi_addresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hole_punch_results_x_multi_addresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hole_punch_results_x_multi_addresses")
	}

	if !cached {
		holePunchResultsXMultiAddressInsertCacheMut.Lock()
		holePunchResultsXMultiAddressInsertCache[key] = cache
		holePunchResultsXMultiAddressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HolePunchResultsXMultiAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HolePunchResultsXMultiAddress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	holePunchResultsXMultiAddressUpdateCacheMut.RLock()
	cache, cached := holePunchResultsXMultiAddressUpdateCache[key]
	holePunchResultsXMultiAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			holePunchResultsXMultiAddressAllColumns,
			holePunchResultsXMultiAddressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hole_punch_results_x_multi_addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hole_punch_results_x_multi_addresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, holePunchResultsXMultiAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(holePunchResultsXMultiAddressType, holePunchResultsXMultiAddressMapping, append(wl, holePunchResultsXMultiAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hole_punch_results_x_multi_addresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hole_punch_results_x_multi_addresses")
	}

	if !cached {
		holePunchResultsXMultiAddressUpdateCacheMut.Lock()
		holePunchResultsXMultiAddressUpdateCache[key] = cache
		holePunchResultsXMultiAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q holePunchResultsXMultiAddressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hole_punch_results_x_multi_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hole_punch_results_x_multi_addresses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HolePunchResultsXMultiAddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), holePunchResultsXMultiAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hole_punch_results_x_multi_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, holePunchResultsXMultiAddressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in holePunchResultsXMultiAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all holePunchResultsXMultiAddress")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HolePunchResultsXMultiAddress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hole_punch_results_x_multi_addresses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(holePunchResultsXMultiAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	holePunchResultsXMultiAddressUpsertCacheMut.RLock()
	cache, cached := holePunchResultsXMultiAddressUpsertCache[key]
	holePunchResultsXMultiAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			holePunchResultsXMultiAddressAllColumns,
			holePunchResultsXMultiAddressColumnsWithDefault,
			holePunchResultsXMultiAddressColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			holePunchResultsXMultiAddressAllColumns,
			holePunchResultsXMultiAddressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hole_punch_results_x_multi_addresses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(holePunchResultsXMultiAddressPrimaryKeyColumns))
			copy(conflict, holePunchResultsXMultiAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hole_punch_results_x_multi_addresses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(holePunchResultsXMultiAddressType, holePunchResultsXMultiAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(holePunchResultsXMultiAddressType, holePunchResultsXMultiAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hole_punch_results_x_multi_addresses")
	}

	if !cached {
		holePunchResultsXMultiAddressUpsertCacheMut.Lock()
		holePunchResultsXMultiAddressUpsertCache[key] = cache
		holePunchResultsXMultiAddressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HolePunchResultsXMultiAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HolePunchResultsXMultiAddress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HolePunchResultsXMultiAddress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), holePunchResultsXMultiAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"hole_punch_results_x_multi_addresses\" WHERE \"multi_address_id\"=$1 AND \"hole_punch_result_id\"=$2 AND \"relationship\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hole_punch_results_x_multi_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hole_punch_results_x_multi_addresses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q holePunchResultsXMultiAddressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no holePunchResultsXMultiAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hole_punch_results_x_multi_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hole_punch_results_x_multi_addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HolePunchResultsXMultiAddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(holePunchResultsXMultiAddressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), holePunchResultsXMultiAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hole_punch_results_x_multi_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, holePunchResultsXMultiAddressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from holePunchResultsXMultiAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hole_punch_results_x_multi_addresses")
	}

	if len(holePunchResultsXMultiAddressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HolePunchResultsXMultiAddress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHolePunchResultsXMultiAddress(ctx, exec, o.MultiAddressID, o.HolePunchResultID, o.Relationship)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HolePunchResultsXMultiAddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HolePunchResultsXMultiAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), holePunchResultsXMultiAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hole_punch_results_x_multi_addresses\".* FROM \"hole_punch_results_x_multi_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, holePunchResultsXMultiAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HolePunchResultsXMultiAddressSlice")
	}

	*o = slice

	return nil
}

// HolePunchResultsXMultiAddressExists checks if the HolePunchResultsXMultiAddress row exists.
func HolePunchResultsXMultiAddressExists(ctx context.Context, exec boil.ContextExecutor, multiAddressID int64, holePunchResultID int, relationship string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hole_punch_results_x_multi_addresses\" where \"multi_address_id\"=$1 AND \"hole_punch_result_id\"=$2 AND \"relationship\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, multiAddressID, holePunchResultID, relationship)
	}
	row := exec.QueryRowContext(ctx, sql, multiAddressID, holePunchResultID, relationship)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hole_punch_results_x_multi_addresses exists")
	}

	return exists, nil
}
