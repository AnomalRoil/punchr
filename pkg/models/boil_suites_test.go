// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEvents)
	t.Run("HolePunchResults", testHolePunchResults)
	t.Run("IPAddresses", testIPAddresses)
	t.Run("MultiAddresses", testMultiAddresses)
	t.Run("PeerLogs", testPeerLogs)
	t.Run("Peers", testPeers)
}

func TestDelete(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsDelete)
	t.Run("HolePunchResults", testHolePunchResultsDelete)
	t.Run("IPAddresses", testIPAddressesDelete)
	t.Run("MultiAddresses", testMultiAddressesDelete)
	t.Run("PeerLogs", testPeerLogsDelete)
	t.Run("Peers", testPeersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsQueryDeleteAll)
	t.Run("HolePunchResults", testHolePunchResultsQueryDeleteAll)
	t.Run("IPAddresses", testIPAddressesQueryDeleteAll)
	t.Run("MultiAddresses", testMultiAddressesQueryDeleteAll)
	t.Run("PeerLogs", testPeerLogsQueryDeleteAll)
	t.Run("Peers", testPeersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsSliceDeleteAll)
	t.Run("HolePunchResults", testHolePunchResultsSliceDeleteAll)
	t.Run("IPAddresses", testIPAddressesSliceDeleteAll)
	t.Run("MultiAddresses", testMultiAddressesSliceDeleteAll)
	t.Run("PeerLogs", testPeerLogsSliceDeleteAll)
	t.Run("Peers", testPeersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsExists)
	t.Run("HolePunchResults", testHolePunchResultsExists)
	t.Run("IPAddresses", testIPAddressesExists)
	t.Run("MultiAddresses", testMultiAddressesExists)
	t.Run("PeerLogs", testPeerLogsExists)
	t.Run("Peers", testPeersExists)
}

func TestFind(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsFind)
	t.Run("HolePunchResults", testHolePunchResultsFind)
	t.Run("IPAddresses", testIPAddressesFind)
	t.Run("MultiAddresses", testMultiAddressesFind)
	t.Run("PeerLogs", testPeerLogsFind)
	t.Run("Peers", testPeersFind)
}

func TestBind(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsBind)
	t.Run("HolePunchResults", testHolePunchResultsBind)
	t.Run("IPAddresses", testIPAddressesBind)
	t.Run("MultiAddresses", testMultiAddressesBind)
	t.Run("PeerLogs", testPeerLogsBind)
	t.Run("Peers", testPeersBind)
}

func TestOne(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsOne)
	t.Run("HolePunchResults", testHolePunchResultsOne)
	t.Run("IPAddresses", testIPAddressesOne)
	t.Run("MultiAddresses", testMultiAddressesOne)
	t.Run("PeerLogs", testPeerLogsOne)
	t.Run("Peers", testPeersOne)
}

func TestAll(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsAll)
	t.Run("HolePunchResults", testHolePunchResultsAll)
	t.Run("IPAddresses", testIPAddressesAll)
	t.Run("MultiAddresses", testMultiAddressesAll)
	t.Run("PeerLogs", testPeerLogsAll)
	t.Run("Peers", testPeersAll)
}

func TestCount(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsCount)
	t.Run("HolePunchResults", testHolePunchResultsCount)
	t.Run("IPAddresses", testIPAddressesCount)
	t.Run("MultiAddresses", testMultiAddressesCount)
	t.Run("PeerLogs", testPeerLogsCount)
	t.Run("Peers", testPeersCount)
}

func TestHooks(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsHooks)
	t.Run("HolePunchResults", testHolePunchResultsHooks)
	t.Run("IPAddresses", testIPAddressesHooks)
	t.Run("MultiAddresses", testMultiAddressesHooks)
	t.Run("PeerLogs", testPeerLogsHooks)
	t.Run("Peers", testPeersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsInsert)
	t.Run("ConnectionEvents", testConnectionEventsInsertWhitelist)
	t.Run("HolePunchResults", testHolePunchResultsInsert)
	t.Run("HolePunchResults", testHolePunchResultsInsertWhitelist)
	t.Run("IPAddresses", testIPAddressesInsert)
	t.Run("IPAddresses", testIPAddressesInsertWhitelist)
	t.Run("MultiAddresses", testMultiAddressesInsert)
	t.Run("MultiAddresses", testMultiAddressesInsertWhitelist)
	t.Run("PeerLogs", testPeerLogsInsert)
	t.Run("PeerLogs", testPeerLogsInsertWhitelist)
	t.Run("Peers", testPeersInsert)
	t.Run("Peers", testPeersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ConnectionEventToPeerUsingLocal", testConnectionEventToOnePeerUsingLocal)
	t.Run("ConnectionEventToMultiAddressUsingConnectionMultiAddress", testConnectionEventToOneMultiAddressUsingConnectionMultiAddress)
	t.Run("ConnectionEventToPeerUsingRemote", testConnectionEventToOnePeerUsingRemote)
	t.Run("HolePunchResultToPeerUsingLocal", testHolePunchResultToOnePeerUsingLocal)
	t.Run("HolePunchResultToMultiAddressUsingMultiAddress", testHolePunchResultToOneMultiAddressUsingMultiAddress)
	t.Run("HolePunchResultToPeerUsingRemote", testHolePunchResultToOnePeerUsingRemote)
	t.Run("PeerLogToPeerUsingPeer", testPeerLogToOnePeerUsingPeer)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ConnectionEventToMultiAddresses", testConnectionEventToManyMultiAddresses)
	t.Run("IPAddressToMultiAddresses", testIPAddressToManyMultiAddresses)
	t.Run("MultiAddressToConnectionMultiAddressConnectionEvents", testMultiAddressToManyConnectionMultiAddressConnectionEvents)
	t.Run("MultiAddressToConnectionEvents", testMultiAddressToManyConnectionEvents)
	t.Run("MultiAddressToHolePunchResults", testMultiAddressToManyHolePunchResults)
	t.Run("MultiAddressToIPAddresses", testMultiAddressToManyIPAddresses)
	t.Run("PeerToLocalConnectionEvents", testPeerToManyLocalConnectionEvents)
	t.Run("PeerToRemoteConnectionEvents", testPeerToManyRemoteConnectionEvents)
	t.Run("PeerToLocalHolePunchResults", testPeerToManyLocalHolePunchResults)
	t.Run("PeerToRemoteHolePunchResults", testPeerToManyRemoteHolePunchResults)
	t.Run("PeerToPeerLogs", testPeerToManyPeerLogs)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ConnectionEventToPeerUsingLocalConnectionEvents", testConnectionEventToOneSetOpPeerUsingLocal)
	t.Run("ConnectionEventToMultiAddressUsingConnectionMultiAddressConnectionEvents", testConnectionEventToOneSetOpMultiAddressUsingConnectionMultiAddress)
	t.Run("ConnectionEventToPeerUsingRemoteConnectionEvents", testConnectionEventToOneSetOpPeerUsingRemote)
	t.Run("HolePunchResultToPeerUsingLocalHolePunchResults", testHolePunchResultToOneSetOpPeerUsingLocal)
	t.Run("HolePunchResultToMultiAddressUsingHolePunchResults", testHolePunchResultToOneSetOpMultiAddressUsingMultiAddress)
	t.Run("HolePunchResultToPeerUsingRemoteHolePunchResults", testHolePunchResultToOneSetOpPeerUsingRemote)
	t.Run("PeerLogToPeerUsingPeerLogs", testPeerLogToOneSetOpPeerUsingPeer)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ConnectionEventToMultiAddresses", testConnectionEventToManyAddOpMultiAddresses)
	t.Run("IPAddressToMultiAddresses", testIPAddressToManyAddOpMultiAddresses)
	t.Run("MultiAddressToConnectionMultiAddressConnectionEvents", testMultiAddressToManyAddOpConnectionMultiAddressConnectionEvents)
	t.Run("MultiAddressToConnectionEvents", testMultiAddressToManyAddOpConnectionEvents)
	t.Run("MultiAddressToHolePunchResults", testMultiAddressToManyAddOpHolePunchResults)
	t.Run("MultiAddressToIPAddresses", testMultiAddressToManyAddOpIPAddresses)
	t.Run("PeerToLocalConnectionEvents", testPeerToManyAddOpLocalConnectionEvents)
	t.Run("PeerToRemoteConnectionEvents", testPeerToManyAddOpRemoteConnectionEvents)
	t.Run("PeerToLocalHolePunchResults", testPeerToManyAddOpLocalHolePunchResults)
	t.Run("PeerToRemoteHolePunchResults", testPeerToManyAddOpRemoteHolePunchResults)
	t.Run("PeerToPeerLogs", testPeerToManyAddOpPeerLogs)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ConnectionEventToMultiAddresses", testConnectionEventToManySetOpMultiAddresses)
	t.Run("IPAddressToMultiAddresses", testIPAddressToManySetOpMultiAddresses)
	t.Run("MultiAddressToConnectionEvents", testMultiAddressToManySetOpConnectionEvents)
	t.Run("MultiAddressToIPAddresses", testMultiAddressToManySetOpIPAddresses)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ConnectionEventToMultiAddresses", testConnectionEventToManyRemoveOpMultiAddresses)
	t.Run("IPAddressToMultiAddresses", testIPAddressToManyRemoveOpMultiAddresses)
	t.Run("MultiAddressToConnectionEvents", testMultiAddressToManyRemoveOpConnectionEvents)
	t.Run("MultiAddressToIPAddresses", testMultiAddressToManyRemoveOpIPAddresses)
}

func TestReload(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsReload)
	t.Run("HolePunchResults", testHolePunchResultsReload)
	t.Run("IPAddresses", testIPAddressesReload)
	t.Run("MultiAddresses", testMultiAddressesReload)
	t.Run("PeerLogs", testPeerLogsReload)
	t.Run("Peers", testPeersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsReloadAll)
	t.Run("HolePunchResults", testHolePunchResultsReloadAll)
	t.Run("IPAddresses", testIPAddressesReloadAll)
	t.Run("MultiAddresses", testMultiAddressesReloadAll)
	t.Run("PeerLogs", testPeerLogsReloadAll)
	t.Run("Peers", testPeersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsSelect)
	t.Run("HolePunchResults", testHolePunchResultsSelect)
	t.Run("IPAddresses", testIPAddressesSelect)
	t.Run("MultiAddresses", testMultiAddressesSelect)
	t.Run("PeerLogs", testPeerLogsSelect)
	t.Run("Peers", testPeersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsUpdate)
	t.Run("HolePunchResults", testHolePunchResultsUpdate)
	t.Run("IPAddresses", testIPAddressesUpdate)
	t.Run("MultiAddresses", testMultiAddressesUpdate)
	t.Run("PeerLogs", testPeerLogsUpdate)
	t.Run("Peers", testPeersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ConnectionEvents", testConnectionEventsSliceUpdateAll)
	t.Run("HolePunchResults", testHolePunchResultsSliceUpdateAll)
	t.Run("IPAddresses", testIPAddressesSliceUpdateAll)
	t.Run("MultiAddresses", testMultiAddressesSliceUpdateAll)
	t.Run("PeerLogs", testPeerLogsSliceUpdateAll)
	t.Run("Peers", testPeersSliceUpdateAll)
}
