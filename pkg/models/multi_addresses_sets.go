// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MultiAddressesSet is an object representing the database table.
type MultiAddressesSet struct {
	ID                int              `boil:"id" json:"id" toml:"id" yaml:"id"`
	MultiAddressesIds types.Int64Array `boil:"multi_addresses_ids" json:"multi_addresses_ids" toml:"multi_addresses_ids" yaml:"multi_addresses_ids"`
	Digest            []byte           `boil:"digest" json:"digest" toml:"digest" yaml:"digest"`

	R *multiAddressesSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L multiAddressesSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MultiAddressesSetColumns = struct {
	ID                string
	MultiAddressesIds string
	Digest            string
}{
	ID:                "id",
	MultiAddressesIds: "multi_addresses_ids",
	Digest:            "digest",
}

var MultiAddressesSetTableColumns = struct {
	ID                string
	MultiAddressesIds string
	Digest            string
}{
	ID:                "multi_addresses_sets.id",
	MultiAddressesIds: "multi_addresses_sets.multi_addresses_ids",
	Digest:            "multi_addresses_sets.digest",
}

// Generated where

type whereHelpertypes_Int64Array struct{ field string }

func (w whereHelpertypes_Int64Array) EQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Int64Array) NEQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Int64Array) LT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Int64Array) LTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Int64Array) GT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Int64Array) GTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var MultiAddressesSetWhere = struct {
	ID                whereHelperint
	MultiAddressesIds whereHelpertypes_Int64Array
	Digest            whereHelper__byte
}{
	ID:                whereHelperint{field: "\"multi_addresses_sets\".\"id\""},
	MultiAddressesIds: whereHelpertypes_Int64Array{field: "\"multi_addresses_sets\".\"multi_addresses_ids\""},
	Digest:            whereHelper__byte{field: "\"multi_addresses_sets\".\"digest\""},
}

// MultiAddressesSetRels is where relationship names are stored.
var MultiAddressesSetRels = struct {
	ListenMultiAddressesSetHolePunchResults string
}{
	ListenMultiAddressesSetHolePunchResults: "ListenMultiAddressesSetHolePunchResults",
}

// multiAddressesSetR is where relationships are stored.
type multiAddressesSetR struct {
	ListenMultiAddressesSetHolePunchResults HolePunchResultSlice `boil:"ListenMultiAddressesSetHolePunchResults" json:"ListenMultiAddressesSetHolePunchResults" toml:"ListenMultiAddressesSetHolePunchResults" yaml:"ListenMultiAddressesSetHolePunchResults"`
}

// NewStruct creates a new relationship struct
func (*multiAddressesSetR) NewStruct() *multiAddressesSetR {
	return &multiAddressesSetR{}
}

// multiAddressesSetL is where Load methods for each relationship are stored.
type multiAddressesSetL struct{}

var (
	multiAddressesSetAllColumns            = []string{"id", "multi_addresses_ids", "digest"}
	multiAddressesSetColumnsWithoutDefault = []string{"multi_addresses_ids", "digest"}
	multiAddressesSetColumnsWithDefault    = []string{"id"}
	multiAddressesSetPrimaryKeyColumns     = []string{"id"}
)

type (
	// MultiAddressesSetSlice is an alias for a slice of pointers to MultiAddressesSet.
	// This should almost always be used instead of []MultiAddressesSet.
	MultiAddressesSetSlice []*MultiAddressesSet
	// MultiAddressesSetHook is the signature for custom MultiAddressesSet hook methods
	MultiAddressesSetHook func(context.Context, boil.ContextExecutor, *MultiAddressesSet) error

	multiAddressesSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	multiAddressesSetType                 = reflect.TypeOf(&MultiAddressesSet{})
	multiAddressesSetMapping              = queries.MakeStructMapping(multiAddressesSetType)
	multiAddressesSetPrimaryKeyMapping, _ = queries.BindMapping(multiAddressesSetType, multiAddressesSetMapping, multiAddressesSetPrimaryKeyColumns)
	multiAddressesSetInsertCacheMut       sync.RWMutex
	multiAddressesSetInsertCache          = make(map[string]insertCache)
	multiAddressesSetUpdateCacheMut       sync.RWMutex
	multiAddressesSetUpdateCache          = make(map[string]updateCache)
	multiAddressesSetUpsertCacheMut       sync.RWMutex
	multiAddressesSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var multiAddressesSetBeforeInsertHooks []MultiAddressesSetHook
var multiAddressesSetBeforeUpdateHooks []MultiAddressesSetHook
var multiAddressesSetBeforeDeleteHooks []MultiAddressesSetHook
var multiAddressesSetBeforeUpsertHooks []MultiAddressesSetHook

var multiAddressesSetAfterInsertHooks []MultiAddressesSetHook
var multiAddressesSetAfterSelectHooks []MultiAddressesSetHook
var multiAddressesSetAfterUpdateHooks []MultiAddressesSetHook
var multiAddressesSetAfterDeleteHooks []MultiAddressesSetHook
var multiAddressesSetAfterUpsertHooks []MultiAddressesSetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MultiAddressesSet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesSetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MultiAddressesSet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesSetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MultiAddressesSet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesSetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MultiAddressesSet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesSetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MultiAddressesSet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesSetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MultiAddressesSet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesSetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MultiAddressesSet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesSetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MultiAddressesSet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesSetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MultiAddressesSet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range multiAddressesSetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMultiAddressesSetHook registers your hook function for all future operations.
func AddMultiAddressesSetHook(hookPoint boil.HookPoint, multiAddressesSetHook MultiAddressesSetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		multiAddressesSetBeforeInsertHooks = append(multiAddressesSetBeforeInsertHooks, multiAddressesSetHook)
	case boil.BeforeUpdateHook:
		multiAddressesSetBeforeUpdateHooks = append(multiAddressesSetBeforeUpdateHooks, multiAddressesSetHook)
	case boil.BeforeDeleteHook:
		multiAddressesSetBeforeDeleteHooks = append(multiAddressesSetBeforeDeleteHooks, multiAddressesSetHook)
	case boil.BeforeUpsertHook:
		multiAddressesSetBeforeUpsertHooks = append(multiAddressesSetBeforeUpsertHooks, multiAddressesSetHook)
	case boil.AfterInsertHook:
		multiAddressesSetAfterInsertHooks = append(multiAddressesSetAfterInsertHooks, multiAddressesSetHook)
	case boil.AfterSelectHook:
		multiAddressesSetAfterSelectHooks = append(multiAddressesSetAfterSelectHooks, multiAddressesSetHook)
	case boil.AfterUpdateHook:
		multiAddressesSetAfterUpdateHooks = append(multiAddressesSetAfterUpdateHooks, multiAddressesSetHook)
	case boil.AfterDeleteHook:
		multiAddressesSetAfterDeleteHooks = append(multiAddressesSetAfterDeleteHooks, multiAddressesSetHook)
	case boil.AfterUpsertHook:
		multiAddressesSetAfterUpsertHooks = append(multiAddressesSetAfterUpsertHooks, multiAddressesSetHook)
	}
}

// One returns a single multiAddressesSet record from the query.
func (q multiAddressesSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MultiAddressesSet, error) {
	o := &MultiAddressesSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for multi_addresses_sets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MultiAddressesSet records from the query.
func (q multiAddressesSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (MultiAddressesSetSlice, error) {
	var o []*MultiAddressesSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MultiAddressesSet slice")
	}

	if len(multiAddressesSetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MultiAddressesSet records in the query.
func (q multiAddressesSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count multi_addresses_sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q multiAddressesSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if multi_addresses_sets exists")
	}

	return count > 0, nil
}

// ListenMultiAddressesSetHolePunchResults retrieves all the hole_punch_result's HolePunchResults with an executor via listen_multi_addresses_set_id column.
func (o *MultiAddressesSet) ListenMultiAddressesSetHolePunchResults(mods ...qm.QueryMod) holePunchResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hole_punch_results\".\"listen_multi_addresses_set_id\"=?", o.ID),
	)

	query := HolePunchResults(queryMods...)
	queries.SetFrom(query.Query, "\"hole_punch_results\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"hole_punch_results\".*"})
	}

	return query
}

// LoadListenMultiAddressesSetHolePunchResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (multiAddressesSetL) LoadListenMultiAddressesSetHolePunchResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMultiAddressesSet interface{}, mods queries.Applicator) error {
	var slice []*MultiAddressesSet
	var object *MultiAddressesSet

	if singular {
		object = maybeMultiAddressesSet.(*MultiAddressesSet)
	} else {
		slice = *maybeMultiAddressesSet.(*[]*MultiAddressesSet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &multiAddressesSetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &multiAddressesSetR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hole_punch_results`),
		qm.WhereIn(`hole_punch_results.listen_multi_addresses_set_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hole_punch_results")
	}

	var resultSlice []*HolePunchResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hole_punch_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hole_punch_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hole_punch_results")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ListenMultiAddressesSetHolePunchResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &holePunchResultR{}
			}
			foreign.R.ListenMultiAddressesSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ListenMultiAddressesSetID {
				local.R.ListenMultiAddressesSetHolePunchResults = append(local.R.ListenMultiAddressesSetHolePunchResults, foreign)
				if foreign.R == nil {
					foreign.R = &holePunchResultR{}
				}
				foreign.R.ListenMultiAddressesSet = local
				break
			}
		}
	}

	return nil
}

// AddListenMultiAddressesSetHolePunchResults adds the given related objects to the existing relationships
// of the multi_addresses_set, optionally inserting them as new records.
// Appends related to o.R.ListenMultiAddressesSetHolePunchResults.
// Sets related.R.ListenMultiAddressesSet appropriately.
func (o *MultiAddressesSet) AddListenMultiAddressesSetHolePunchResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HolePunchResult) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ListenMultiAddressesSetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hole_punch_results\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"listen_multi_addresses_set_id"}),
				strmangle.WhereClause("\"", "\"", 2, holePunchResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ListenMultiAddressesSetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &multiAddressesSetR{
			ListenMultiAddressesSetHolePunchResults: related,
		}
	} else {
		o.R.ListenMultiAddressesSetHolePunchResults = append(o.R.ListenMultiAddressesSetHolePunchResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &holePunchResultR{
				ListenMultiAddressesSet: o,
			}
		} else {
			rel.R.ListenMultiAddressesSet = o
		}
	}
	return nil
}

// MultiAddressesSets retrieves all the records using an executor.
func MultiAddressesSets(mods ...qm.QueryMod) multiAddressesSetQuery {
	mods = append(mods, qm.From("\"multi_addresses_sets\""))
	return multiAddressesSetQuery{NewQuery(mods...)}
}

// FindMultiAddressesSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMultiAddressesSet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MultiAddressesSet, error) {
	multiAddressesSetObj := &MultiAddressesSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"multi_addresses_sets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, multiAddressesSetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from multi_addresses_sets")
	}

	if err = multiAddressesSetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return multiAddressesSetObj, err
	}

	return multiAddressesSetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MultiAddressesSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no multi_addresses_sets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(multiAddressesSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	multiAddressesSetInsertCacheMut.RLock()
	cache, cached := multiAddressesSetInsertCache[key]
	multiAddressesSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			multiAddressesSetAllColumns,
			multiAddressesSetColumnsWithDefault,
			multiAddressesSetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(multiAddressesSetType, multiAddressesSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(multiAddressesSetType, multiAddressesSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"multi_addresses_sets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"multi_addresses_sets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into multi_addresses_sets")
	}

	if !cached {
		multiAddressesSetInsertCacheMut.Lock()
		multiAddressesSetInsertCache[key] = cache
		multiAddressesSetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MultiAddressesSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MultiAddressesSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	multiAddressesSetUpdateCacheMut.RLock()
	cache, cached := multiAddressesSetUpdateCache[key]
	multiAddressesSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			multiAddressesSetAllColumns,
			multiAddressesSetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update multi_addresses_sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"multi_addresses_sets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, multiAddressesSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(multiAddressesSetType, multiAddressesSetMapping, append(wl, multiAddressesSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update multi_addresses_sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for multi_addresses_sets")
	}

	if !cached {
		multiAddressesSetUpdateCacheMut.Lock()
		multiAddressesSetUpdateCache[key] = cache
		multiAddressesSetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q multiAddressesSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for multi_addresses_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for multi_addresses_sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MultiAddressesSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), multiAddressesSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"multi_addresses_sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, multiAddressesSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in multiAddressesSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all multiAddressesSet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MultiAddressesSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no multi_addresses_sets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(multiAddressesSetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	multiAddressesSetUpsertCacheMut.RLock()
	cache, cached := multiAddressesSetUpsertCache[key]
	multiAddressesSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			multiAddressesSetAllColumns,
			multiAddressesSetColumnsWithDefault,
			multiAddressesSetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			multiAddressesSetAllColumns,
			multiAddressesSetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert multi_addresses_sets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(multiAddressesSetPrimaryKeyColumns))
			copy(conflict, multiAddressesSetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"multi_addresses_sets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(multiAddressesSetType, multiAddressesSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(multiAddressesSetType, multiAddressesSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert multi_addresses_sets")
	}

	if !cached {
		multiAddressesSetUpsertCacheMut.Lock()
		multiAddressesSetUpsertCache[key] = cache
		multiAddressesSetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MultiAddressesSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MultiAddressesSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MultiAddressesSet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), multiAddressesSetPrimaryKeyMapping)
	sql := "DELETE FROM \"multi_addresses_sets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from multi_addresses_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for multi_addresses_sets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q multiAddressesSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no multiAddressesSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from multi_addresses_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for multi_addresses_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MultiAddressesSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(multiAddressesSetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), multiAddressesSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"multi_addresses_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, multiAddressesSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from multiAddressesSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for multi_addresses_sets")
	}

	if len(multiAddressesSetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MultiAddressesSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMultiAddressesSet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MultiAddressesSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MultiAddressesSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), multiAddressesSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"multi_addresses_sets\".* FROM \"multi_addresses_sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, multiAddressesSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MultiAddressesSetSlice")
	}

	*o = slice

	return nil
}

// MultiAddressesSetExists checks if the MultiAddressesSet row exists.
func MultiAddressesSetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"multi_addresses_sets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if multi_addresses_sets exists")
	}

	return exists, nil
}
