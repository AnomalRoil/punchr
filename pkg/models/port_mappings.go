// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PortMapping is an object representing the database table.
type PortMapping struct {
	ID                int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	HolePunchResultID int    `boil:"hole_punch_result_id" json:"hole_punch_result_id" toml:"hole_punch_result_id" yaml:"hole_punch_result_id"`
	InternalPort      int    `boil:"internal_port" json:"internal_port" toml:"internal_port" yaml:"internal_port"`
	ExternalPort      int    `boil:"external_port" json:"external_port" toml:"external_port" yaml:"external_port"`
	Protocol          string `boil:"protocol" json:"protocol" toml:"protocol" yaml:"protocol"`
	Addr              string `boil:"addr" json:"addr" toml:"addr" yaml:"addr"`
	AddrNetwork       string `boil:"addr_network" json:"addr_network" toml:"addr_network" yaml:"addr_network"`

	R *portMappingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portMappingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortMappingColumns = struct {
	ID                string
	HolePunchResultID string
	InternalPort      string
	ExternalPort      string
	Protocol          string
	Addr              string
	AddrNetwork       string
}{
	ID:                "id",
	HolePunchResultID: "hole_punch_result_id",
	InternalPort:      "internal_port",
	ExternalPort:      "external_port",
	Protocol:          "protocol",
	Addr:              "addr",
	AddrNetwork:       "addr_network",
}

var PortMappingTableColumns = struct {
	ID                string
	HolePunchResultID string
	InternalPort      string
	ExternalPort      string
	Protocol          string
	Addr              string
	AddrNetwork       string
}{
	ID:                "port_mappings.id",
	HolePunchResultID: "port_mappings.hole_punch_result_id",
	InternalPort:      "port_mappings.internal_port",
	ExternalPort:      "port_mappings.external_port",
	Protocol:          "port_mappings.protocol",
	Addr:              "port_mappings.addr",
	AddrNetwork:       "port_mappings.addr_network",
}

// Generated where

var PortMappingWhere = struct {
	ID                whereHelperint
	HolePunchResultID whereHelperint
	InternalPort      whereHelperint
	ExternalPort      whereHelperint
	Protocol          whereHelperstring
	Addr              whereHelperstring
	AddrNetwork       whereHelperstring
}{
	ID:                whereHelperint{field: "\"port_mappings\".\"id\""},
	HolePunchResultID: whereHelperint{field: "\"port_mappings\".\"hole_punch_result_id\""},
	InternalPort:      whereHelperint{field: "\"port_mappings\".\"internal_port\""},
	ExternalPort:      whereHelperint{field: "\"port_mappings\".\"external_port\""},
	Protocol:          whereHelperstring{field: "\"port_mappings\".\"protocol\""},
	Addr:              whereHelperstring{field: "\"port_mappings\".\"addr\""},
	AddrNetwork:       whereHelperstring{field: "\"port_mappings\".\"addr_network\""},
}

// PortMappingRels is where relationship names are stored.
var PortMappingRels = struct {
	HolePunchResult string
}{
	HolePunchResult: "HolePunchResult",
}

// portMappingR is where relationships are stored.
type portMappingR struct {
	HolePunchResult *HolePunchResult `boil:"HolePunchResult" json:"HolePunchResult" toml:"HolePunchResult" yaml:"HolePunchResult"`
}

// NewStruct creates a new relationship struct
func (*portMappingR) NewStruct() *portMappingR {
	return &portMappingR{}
}

func (r *portMappingR) GetHolePunchResult() *HolePunchResult {
	if r == nil {
		return nil
	}
	return r.HolePunchResult
}

// portMappingL is where Load methods for each relationship are stored.
type portMappingL struct{}

var (
	portMappingAllColumns            = []string{"id", "hole_punch_result_id", "internal_port", "external_port", "protocol", "addr", "addr_network"}
	portMappingColumnsWithoutDefault = []string{"hole_punch_result_id", "internal_port", "external_port", "protocol", "addr", "addr_network"}
	portMappingColumnsWithDefault    = []string{"id"}
	portMappingPrimaryKeyColumns     = []string{"id"}
	portMappingGeneratedColumns      = []string{"id"}
)

type (
	// PortMappingSlice is an alias for a slice of pointers to PortMapping.
	// This should almost always be used instead of []PortMapping.
	PortMappingSlice []*PortMapping
	// PortMappingHook is the signature for custom PortMapping hook methods
	PortMappingHook func(context.Context, boil.ContextExecutor, *PortMapping) error

	portMappingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portMappingType                 = reflect.TypeOf(&PortMapping{})
	portMappingMapping              = queries.MakeStructMapping(portMappingType)
	portMappingPrimaryKeyMapping, _ = queries.BindMapping(portMappingType, portMappingMapping, portMappingPrimaryKeyColumns)
	portMappingInsertCacheMut       sync.RWMutex
	portMappingInsertCache          = make(map[string]insertCache)
	portMappingUpdateCacheMut       sync.RWMutex
	portMappingUpdateCache          = make(map[string]updateCache)
	portMappingUpsertCacheMut       sync.RWMutex
	portMappingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var portMappingAfterSelectHooks []PortMappingHook

var portMappingBeforeInsertHooks []PortMappingHook
var portMappingAfterInsertHooks []PortMappingHook

var portMappingBeforeUpdateHooks []PortMappingHook
var portMappingAfterUpdateHooks []PortMappingHook

var portMappingBeforeDeleteHooks []PortMappingHook
var portMappingAfterDeleteHooks []PortMappingHook

var portMappingBeforeUpsertHooks []PortMappingHook
var portMappingAfterUpsertHooks []PortMappingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PortMapping) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portMappingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PortMapping) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portMappingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PortMapping) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portMappingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PortMapping) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portMappingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PortMapping) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portMappingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PortMapping) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portMappingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PortMapping) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portMappingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PortMapping) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portMappingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PortMapping) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range portMappingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortMappingHook registers your hook function for all future operations.
func AddPortMappingHook(hookPoint boil.HookPoint, portMappingHook PortMappingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		portMappingAfterSelectHooks = append(portMappingAfterSelectHooks, portMappingHook)
	case boil.BeforeInsertHook:
		portMappingBeforeInsertHooks = append(portMappingBeforeInsertHooks, portMappingHook)
	case boil.AfterInsertHook:
		portMappingAfterInsertHooks = append(portMappingAfterInsertHooks, portMappingHook)
	case boil.BeforeUpdateHook:
		portMappingBeforeUpdateHooks = append(portMappingBeforeUpdateHooks, portMappingHook)
	case boil.AfterUpdateHook:
		portMappingAfterUpdateHooks = append(portMappingAfterUpdateHooks, portMappingHook)
	case boil.BeforeDeleteHook:
		portMappingBeforeDeleteHooks = append(portMappingBeforeDeleteHooks, portMappingHook)
	case boil.AfterDeleteHook:
		portMappingAfterDeleteHooks = append(portMappingAfterDeleteHooks, portMappingHook)
	case boil.BeforeUpsertHook:
		portMappingBeforeUpsertHooks = append(portMappingBeforeUpsertHooks, portMappingHook)
	case boil.AfterUpsertHook:
		portMappingAfterUpsertHooks = append(portMappingAfterUpsertHooks, portMappingHook)
	}
}

// One returns a single portMapping record from the query.
func (q portMappingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PortMapping, error) {
	o := &PortMapping{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for port_mappings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PortMapping records from the query.
func (q portMappingQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortMappingSlice, error) {
	var o []*PortMapping

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PortMapping slice")
	}

	if len(portMappingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PortMapping records in the query.
func (q portMappingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count port_mappings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portMappingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if port_mappings exists")
	}

	return count > 0, nil
}

// HolePunchResult pointed to by the foreign key.
func (o *PortMapping) HolePunchResult(mods ...qm.QueryMod) holePunchResultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HolePunchResultID),
	}

	queryMods = append(queryMods, mods...)

	return HolePunchResults(queryMods...)
}

// LoadHolePunchResult allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portMappingL) LoadHolePunchResult(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortMapping interface{}, mods queries.Applicator) error {
	var slice []*PortMapping
	var object *PortMapping

	if singular {
		var ok bool
		object, ok = maybePortMapping.(*PortMapping)
		if !ok {
			object = new(PortMapping)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePortMapping)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePortMapping))
			}
		}
	} else {
		s, ok := maybePortMapping.(*[]*PortMapping)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePortMapping)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePortMapping))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portMappingR{}
		}
		args = append(args, object.HolePunchResultID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portMappingR{}
			}

			for _, a := range args {
				if a == obj.HolePunchResultID {
					continue Outer
				}
			}

			args = append(args, obj.HolePunchResultID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hole_punch_results`),
		qm.WhereIn(`hole_punch_results.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HolePunchResult")
	}

	var resultSlice []*HolePunchResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HolePunchResult")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hole_punch_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hole_punch_results")
	}

	if len(portMappingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HolePunchResult = foreign
		if foreign.R == nil {
			foreign.R = &holePunchResultR{}
		}
		foreign.R.PortMappings = append(foreign.R.PortMappings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HolePunchResultID == foreign.ID {
				local.R.HolePunchResult = foreign
				if foreign.R == nil {
					foreign.R = &holePunchResultR{}
				}
				foreign.R.PortMappings = append(foreign.R.PortMappings, local)
				break
			}
		}
	}

	return nil
}

// SetHolePunchResult of the portMapping to the related item.
// Sets o.R.HolePunchResult to related.
// Adds o to related.R.PortMappings.
func (o *PortMapping) SetHolePunchResult(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HolePunchResult) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"port_mappings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hole_punch_result_id"}),
		strmangle.WhereClause("\"", "\"", 2, portMappingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HolePunchResultID = related.ID
	if o.R == nil {
		o.R = &portMappingR{
			HolePunchResult: related,
		}
	} else {
		o.R.HolePunchResult = related
	}

	if related.R == nil {
		related.R = &holePunchResultR{
			PortMappings: PortMappingSlice{o},
		}
	} else {
		related.R.PortMappings = append(related.R.PortMappings, o)
	}

	return nil
}

// PortMappings retrieves all the records using an executor.
func PortMappings(mods ...qm.QueryMod) portMappingQuery {
	mods = append(mods, qm.From("\"port_mappings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"port_mappings\".*"})
	}

	return portMappingQuery{q}
}

// FindPortMapping retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPortMapping(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PortMapping, error) {
	portMappingObj := &PortMapping{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"port_mappings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, portMappingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from port_mappings")
	}

	if err = portMappingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return portMappingObj, err
	}

	return portMappingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PortMapping) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no port_mappings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portMappingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portMappingInsertCacheMut.RLock()
	cache, cached := portMappingInsertCache[key]
	portMappingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portMappingAllColumns,
			portMappingColumnsWithDefault,
			portMappingColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, portMappingGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(portMappingType, portMappingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portMappingType, portMappingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"port_mappings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"port_mappings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into port_mappings")
	}

	if !cached {
		portMappingInsertCacheMut.Lock()
		portMappingInsertCache[key] = cache
		portMappingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PortMapping.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PortMapping) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portMappingUpdateCacheMut.RLock()
	cache, cached := portMappingUpdateCache[key]
	portMappingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portMappingAllColumns,
			portMappingPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, portMappingGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update port_mappings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"port_mappings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, portMappingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portMappingType, portMappingMapping, append(wl, portMappingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update port_mappings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for port_mappings")
	}

	if !cached {
		portMappingUpdateCacheMut.Lock()
		portMappingUpdateCache[key] = cache
		portMappingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portMappingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for port_mappings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for port_mappings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortMappingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"port_mappings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, portMappingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in portMapping slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all portMapping")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PortMapping) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no port_mappings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portMappingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	portMappingUpsertCacheMut.RLock()
	cache, cached := portMappingUpsertCache[key]
	portMappingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			portMappingAllColumns,
			portMappingColumnsWithDefault,
			portMappingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			portMappingAllColumns,
			portMappingPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, portMappingGeneratedColumns)
		update = strmangle.SetComplement(update, portMappingGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert port_mappings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(portMappingPrimaryKeyColumns))
			copy(conflict, portMappingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"port_mappings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(portMappingType, portMappingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(portMappingType, portMappingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert port_mappings")
	}

	if !cached {
		portMappingUpsertCacheMut.Lock()
		portMappingUpsertCache[key] = cache
		portMappingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PortMapping record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PortMapping) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PortMapping provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portMappingPrimaryKeyMapping)
	sql := "DELETE FROM \"port_mappings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from port_mappings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for port_mappings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portMappingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no portMappingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from port_mappings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for port_mappings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortMappingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(portMappingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"port_mappings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, portMappingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portMapping slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for port_mappings")
	}

	if len(portMappingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PortMapping) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPortMapping(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortMappingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortMappingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portMappingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"port_mappings\".* FROM \"port_mappings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, portMappingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PortMappingSlice")
	}

	*o = slice

	return nil
}

// PortMappingExists checks if the PortMapping row exists.
func PortMappingExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"port_mappings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if port_mappings exists")
	}

	return exists, nil
}
