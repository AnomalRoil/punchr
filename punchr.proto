syntax = "proto3";

option go_package = "github.com/dennis-tra/punchr/pkg/pb";

service PunchrService {
  // Register takes punchr client information and saves them to the database.
  // This should be called upon start of a client.
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // GetAddrInfo returns peer address information that should be used to attempt
  // a hole punch. Clients should call this endpoint periodically.
  rpc GetAddrInfo(GetAddrInfoRequest) returns (GetAddrInfoResponse);

  // TrackHolePunch takes measurement data from the client and persists them in the database
  rpc TrackHolePunch(TrackHolePunchRequest) returns (TrackHolePunchResponse);
}

message RegisterRequest {
  bytes client_id = 1;
  string agent_version = 2;
  repeated string protocols = 3;
}

message RegisterResponse {
  int64 db_peer_id = 1;
}

message GetAddrInfoRequest {
  // Peer ID of the requesting punchr client
  bytes client_id = 1;
}

message GetAddrInfoResponse {
  bytes remote_id = 1;
  repeated bytes multi_addresses = 2;
}

enum HolePunchEndReason {
  UNKNOWN = 0;

  // Could not connect to remote peer via relay
  NO_CONNECTION = 1;

  // Hole punch was not initiated from the remote peer
  // because we have a direct connection (connection reversal succeeded?)
  DIRECT_CONNECTION = 2;

  // We connected to the remote peer via a relay but the remote did not initiate a hole punch
  NOT_INITIATED = 3;

  // Should never happen on our side. This happens if the connection reversal from our side succeeded.
  DIRECT_DIAL = 4;

  // Can happen if the stream was reset mid-flight
  PROTOCOL_ERROR = 5;

  // The hole punch was started, the /libp2p/dcutr stream was opened.
  HOLE_PUNCH = 6;
}

message TrackHolePunchRequest {
  // Peer ID of the requesting punchr client
  bytes client_id = 1;
  // Peer ID of the remote peer that was hole punched
  bytes remote_id = 2;
  // A boolean flag indicating if the hole punch (or connection reversal) succeeded
  bool success = 3;
  // Unix timestamp in milliseconds of when the connection to the remote peer was initiated
  int64 started_at = 4;
  // The multi addresses that were used to attempt a hole punch
  repeated bytes remote_multi_addresses = 5;
  // The number of hole punch attempts
  int32 attempts = 6;
  // The error that occurred if the hole punch failed
  string error = 7;
  // The error that occurred if the connection reversal failed. This is only set of
  // the multi addresses for the remote peer contained a publicly reachable non-relay multi address
  string direct_dial_error = 8;
  // Start round trip time in seconds that falls out of the `holepunch.StartHolePunchEvt`
  float start_rtt = 9;
  // The elapsed time in seconds from start to finish of the hole punch
  float elapsed_time = 10;
  // The reason why the hole punch ended (direct dial succeeded, protocol error occurred, hole punch procedure finished)
  HolePunchEndReason end_reason = 11;
}

message TrackHolePunchResponse {
}
